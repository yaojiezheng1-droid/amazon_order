#!/usr/bin/env python3
"""Fill PO_import Excel template with data from JSON files generated by direct_sku_to_json.py

This script reads JSON files from the json_exports directory and fills the 
PO_import_empty.xlsx template with the product data according to the specified mapping.

Usage:
    python fill_po_import.py [order_name]
    
If order_name is provided, it will process files named {order_name}-*.json
If no order_name is provided, it will process all JSON files in json_exports/
"""

import argparse
import json
from pathlib import Path
from typing import Dict, List, Any

import openpyxl


ROOT = Path(__file__).resolve().parent
JSON_EXPORTS_DIR = ROOT / "json_exports"
TEMPLATE_PATH = ROOT / "docs" / "PO_import_empty.xlsx"
OUTPUT_DIR = ROOT / "PO_import_filled"


def load_json_file(json_path: Path) -> Dict[str, Any]:
    """Load a JSON file and return its contents."""
    with open(json_path, "r", encoding="utf-8") as f:
        return json.load(f)


def extract_supplier_from_json(json_data: Dict[str, Any]) -> str:
    """Extract supplier name from JSON data (B3 value)."""
    return json_data.get("cells", {}).get("B3", {}).get("value", "")


def extract_products_from_json(json_data: Dict[str, Any]) -> List[Dict[str, Any]]:
    """Extract products list from JSON data."""
    return json_data.get("products", [])


def create_po_import_data(json_files: List[Path], order_name: str = "factory", warehouse: str = "默认仓库") -> List[Dict[str, Any]]:
    """
    Create PO import data from JSON files.
    
    Args:
        json_files: List of JSON file paths
        order_name: Base order name (from product_search_gui.py)
        warehouse: Default warehouse name for 采购仓库 field (fallback)
        
    Returns:
        List of rows for the PO import Excel
    """
    po_rows = []
    
    # Try to load per-product warehouse mapping
    warehouse_mapping = {}
    warehouse_mapping_file = ROOT / f"warehouse_mapping_{order_name}.json"
    if warehouse_mapping_file.exists():
        try:
            with open(warehouse_mapping_file, 'r', encoding='utf-8') as f:
                warehouse_mapping = json.load(f)
            print(f"Loaded warehouse mapping from {warehouse_mapping_file}")
        except Exception as e:
            print(f"Error reading warehouse mapping: {e}")
    
    # Process each JSON file and assign incrementing *标识号
    for factory_index, json_file in enumerate(json_files, start=1):
        print(f"Processing {json_file.name}...")
        json_data = load_json_file(json_file)
        
        supplier = extract_supplier_from_json(json_data)
        products = extract_products_from_json(json_data)
        
        # Extract order number from filename (e.g., "factory-1.json" -> "factory-1")
        order_number = json_file.stem
        
        # Each factory JSON gets a different *标识号 (1, 2, 3, ...)
        batch_id = str(factory_index)
        
        for product in products:
            # Get warehouse for this specific product
            product_sku = product.get("产品编号", "")
            product_warehouse = warehouse_mapping.get(product_sku, warehouse)
            
            # Create a row for each product
            row = {
                "*标识号": batch_id,  # Different for each factory JSON (1, 2, 3, ...)
                "采购单号": order_number,  # Order name + number from filename
                "*供应商": supplier,  # From JSON B3 value
                "联系人": "",
                "采购方": "",
                "联系方式": "",
                "结算方式": "",
                "预付比例": "",
                "结算账期": "",
                "结算描述": "",
                "支付方式": "",
                "*含税": "是",  # Fixed value as requested
                "*费用分配方式": "按数量",  # Fixed value as requested
                "*采购币种": "CNY",  # Fixed value as requested
                "当前汇率": "",
                "运费": "",
                "运费币种": "",
                "其他费用": "",
                "其他费用币种": "",
                "采购员": "",
                "质检类型": "",
                "单据备注": "",
                "*采购仓库": product_warehouse,  # Per-product warehouse from mapping
                "计划编号": "",
                "*SKU": product_sku,  # From JSON product data
                "店铺": "",
                "FNSKU": "",
                "是否赠品": "",
                "单箱数量": "",
                "箱数": "",
                "*实际采购量": product.get("数量/个", 0),  # From JSON product data
                "*含税单价": product.get("单价", 0),  # From JSON product data
                "税率": "",
                "预计到货时间": "",
                "产品备注": product.get("描述", ""),  # From JSON product data
                "更新报价": ""
            }
            po_rows.append(row)
    
    # Clean up warehouse mapping file after processing
    if warehouse_mapping_file.exists():
        try:
            warehouse_mapping_file.unlink()
            print(f"Cleaned up warehouse mapping file: {warehouse_mapping_file}")
        except Exception as e:
            print(f"Warning: Could not delete warehouse mapping file: {e}")
    
    return po_rows


def fill_excel_template(po_data: List[Dict[str, Any]], output_path: Path):
    """
    Fill the Excel template with PO data.
    
    Args:
        po_data: List of product rows
        output_path: Path to save the filled Excel file
    """
    # Load the template
    wb = openpyxl.load_workbook(TEMPLATE_PATH)
    ws = wb.active
    
    # Get headers from row 2
    headers = []
    for col in range(1, ws.max_column + 1):
        header = ws.cell(2, col).value
        headers.append(header)
    
    # Clear existing data (keep headers)
    for row in range(3, ws.max_row + 1):
        for col in range(1, ws.max_column + 1):
            ws.cell(row, col).value = None
    
    # Fill with new data
    for row_idx, data_row in enumerate(po_data, start=3):  # Start from row 3
        for col_idx, header in enumerate(headers, start=1):
            if header in data_row:
                ws.cell(row_idx, col_idx).value = data_row[header]
    
    # Save the filled Excel file
    output_path.parent.mkdir(parents=True, exist_ok=True)
    wb.save(output_path)
    print(f"Saved filled PO import file: {output_path}")


def get_json_files(order_name: str = None) -> List[Path]:
    """
    Get JSON files to process.
    
    Args:
        order_name: If provided, only process files matching this order name
        
    Returns:
        List of JSON file paths
    """
    if not JSON_EXPORTS_DIR.exists():
        print(f"Error: JSON exports directory not found: {JSON_EXPORTS_DIR}")
        return []
    
    if order_name:
        # Look for files like {order_name}-1.json, {order_name}-2.json, etc.
        pattern = f"{order_name}-*.json"
        json_files = list(JSON_EXPORTS_DIR.glob(pattern))
        if not json_files:
            print(f"No JSON files found matching pattern: {pattern}")
            return []
    else:
        # Process all JSON files
        json_files = list(JSON_EXPORTS_DIR.glob("*.json"))
        if not json_files:
            print(f"No JSON files found in: {JSON_EXPORTS_DIR}")
            return []
    
    # Sort files for consistent processing order
    json_files.sort()
    
    print(f"Found {len(json_files)} JSON files to process:")
    for f in json_files:
        print(f"  {f.name}")
    
    return json_files


def fill_po_import_for_order(order_name: str, output_filename: str = None, warehouse: str = "默认仓库") -> Path:
    """
    Fill PO import Excel for a specific order name.
    
    This function can be called programmatically from other scripts.
    
    Args:
        order_name: Order name to process (will look for {order_name}-*.json files)
        output_filename: Optional custom output filename
        warehouse: Warehouse name for 采购仓库 field
        
    Returns:
        Path to the created Excel file
        
    Raises:
        FileNotFoundError: If template or JSON files not found
        ValueError: If no products found in JSON files
    """
    # Check if template exists
    if not TEMPLATE_PATH.exists():
        raise FileNotFoundError(f"Template file not found: {TEMPLATE_PATH}")
    
    # Get JSON files to process
    json_files = get_json_files(order_name)
    if not json_files:
        raise FileNotFoundError(f"No JSON files found for order: {order_name}")
    
    # Create PO import data
    po_data = create_po_import_data(json_files, order_name, warehouse)
    
    if not po_data:
        raise ValueError("No product data found in JSON files.")
    
    # Determine output filename
    if output_filename:
        if not output_filename.endswith('.xlsx'):
            output_filename += '.xlsx'
    else:
        output_filename = f"PO_import_{order_name}.xlsx"
    
    output_path = OUTPUT_DIR / output_filename
    
    # Fill Excel template
    fill_excel_template(po_data, output_path)
    
    return output_path


def main():
    """Main function."""
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "order_name", 
        nargs="?", 
        help="Order name to process (will look for {order_name}-*.json files)"
    )
    parser.add_argument(
        "--output", "-o",
        help="Output filename (default: PO_import_{order_name}.xlsx)"
    )
    parser.add_argument(
        "--warehouse", "-w",
        default="默认仓库",
        help="Warehouse name for 采购仓库 field (default: 默认仓库)"
    )
    
    args = parser.parse_args()
    
    # Check if template exists
    if not TEMPLATE_PATH.exists():
        print(f"Error: Template file not found: {TEMPLATE_PATH}")
        return 1
    
    # Get JSON files to process
    json_files = get_json_files(args.order_name)
    if not json_files:
        return 1
    
    # Create PO import data
    order_name = args.order_name or "all_orders"
    po_data = create_po_import_data(json_files, order_name, args.warehouse)
    
    if not po_data:
        print("No product data found in JSON files.")
        return 1
    
    print(f"\nCreated {len(po_data)} product rows for PO import.")
    
    # Determine output filename
    if args.output:
        output_filename = args.output
    else:
        output_filename = f"PO_import_{order_name}.xlsx"
    
    output_path = OUTPUT_DIR / output_filename
    
    # Fill Excel template
    fill_excel_template(po_data, output_path)
    
    print(f"\nSuccessfully created PO import file with {len(po_data)} products.")
    print(f"Output: {output_path}")
    
    return 0


if __name__ == "__main__":
    import sys
    sys.exit(main())
